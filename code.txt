
//날짜랑 장소를 입력하면 그 날짜에해당하는 장소의 장소이름과 행사 이름 그리고 초미세먼지의 평균값을 알려줌  
void showPlaceAndDust(std::unique_ptr<sql::Connection> &conn, std::string mydate, std::string myregion) {
    try {
        // createStaemet 객체 생성
        std::unique_ptr<sql::Statement> stmnt(conn->createStatement());
        
        // 쿼리를 실행
        
        sql::SQLString date = "SELECT A.REGION,FESTIVAL.ENAME,A.DUST,A.SDUST FROM FESTIVAL INNER JOIN (SELECT NUMR ,MIN(DATE) AS DATE ,REGION, AVG(DUST) AS DUST,AVG(SDUST) AS SDUST FROM AIR WHERE DATE LIKE ";
        sql::SQLString when =" '%-"+mydate+" %'";
        sql::SQLString region = " AND REGION = '"  + myregion+ "' ";
        sql::SQLString rest =")AS A ON FESTIVAL.NUMR =A.NUMR ";

        sql::ResultSet *res = stmnt->executeQuery(date+when+region+rest);
        // 반복문을 통해서 내부의 값을 반환
        while (res->next()) 
        {
            std::cout << "REGION = " << res->getString(1);
            std::cout << ", ENAME = " << res->getString(2);
            std::cout<< ", SDUST = " <<res->getFloat(3)<<std::endl;
        } 

    // 실패시 오류 메세지 반환
    } catch(sql::SQLException& e){
      std::cerr << "Error selecting tasks: " << e.what() << std::endl;
   }
}


void uT(std::unique_ptr<sql::Connection> &conn) {
//     std::map<std::string,std::string> mep;
//     try {
//         // PreparedStatement 객체 생성
//         // std::unique_ptr<sql::PreparedStatement> atmnt(conn->prepareStatement("insert into tasks values (default, ?, ?, ?)"));
//         // 객체에 값을 전달
//         // stmnt->setString(1, name);
//         // stmnt->setInt(2, age);
//         // stmnt->setBoolean(3, gender);
//         // 객체의 내부 함수를 이용하여 쿼리를 실행
//         // stmnt->executeQuery();
//         //SELECT * FROM SADDRESS
//         std::unique_ptr<sql::Statement> stmnt(conn->createStatement());
//         sql::SQLString aa ="SELECT * FROM SADDRESS";
//         sql::ResultSet *ba=stmnt->executeQuery(aa);
//         std::string cc,x,z;
       
//         if(ba->rowsCount()==0)
//             std::cout<<"쿼리문제\n";
//         while (ba->next())
//         {
//             cc=ba->getString(3);
//             std::istringstream ss(cc);   
//             ss>>x>>z;
//             std::cout<<z<<std::endl;
//             x=ba->getString(2);
//             // x+="%";
//             std::cout<<x<<std::endl;
//             std::unique_ptr<sql::PreparedStatement> atmnt(conn->prepareStatement("UPDATE SUBWAY SET REGION = ? WHERE STATION LIKE ?"));
//             atmnt->setString(1,z);
//             atmnt->setString(2,x);
//             atmnt->executeQuery();
//         }
        

//     // 실패시 오류 메세지 반환
//     } catch(sql::SQLException& e){
//       std::cerr << "Error inserting new task: " << e.what() << std::endl;
//    }
// }






void showRegion(std::unique_ptr<sql::Connection> &conn)
{
    std::string cc="서울	부산	대구	인천	광주	대전	울산	세종	경기도	강원도	충청북도	충청남도	전라북도	전라남도	경상북도	경상남도	제주도	기타도시	도시이외";
    std::istringstream ss(cc);
    std::string a[19];
    for (int i = 0; i <19; i++)
    {
       ss>>a[i];
    }
    std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM REGION"));
    sql::ResultSet *res;
    res=stmnt->executeQuery();
    while (res->next())
    {
        for (int i = 1; i <= 21; i++)
        {
        if(i<3)    
            std::cout<<res->getString(i)<<", ";
        else if(i==16)
            std::cout<<"\n"<<a[i-3]<<" "<<res->getInt(i)<<"건 ";
        else
            std::cout<<a[i-3]<<" "<<res->getInt(i)<<"건 ";    
        

        }
        std::cout<<"\n";
        for (int  i = 0; i < 30; i++)
        {
          std::cout<<"------";
        }
        
        std::cout<<"\n\n\n";                  
    }
    

}

void showGBCCF_Region(std::unique_ptr<sql::Connection> &conn)
{
    std::string cc="서울	부산	대구	인천	광주	대전	울산	세종	경기도	강원도	충청북도	충청남도	전라북도	전라남도	경상북도	경상남도	제주도	기타도시	도시이외";
    std::istringstream ss(cc);
    std::string a[19];
    for (int i = 0; i <19; i++)
    {
       ss>>a[i];
    }
    std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM GBCCF_REGION"));
    sql::ResultSet *res;
    res=stmnt->executeQuery();
    while (res->next())
    {
        for (int i = 1; i <= 21; i++)
        {
        if(i==1)    
            std::cout<<res->getString(i)<<", ";
        else if(i==16)
            std::cout<<"\n"<<a[i-2]<<" "<<res->getInt(i)<<"건 ";
        else
            std::cout<<a[i-2]<<" "<<res->getInt(i)<<"건 ";    
        

        }
        std::cout<<"\n";
        for (int  i = 0; i < 30; i++)
        {
          std::cout<<"------";
        }
        
        std::cout<<"\n\n\n";                  
    }
    

}

void showAgeSex(std::unique_ptr<sql::Connection> &conn) {
    try {
        // PreparedStatement 객체 생성
        std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM AGESEX "));
        // 객체에 값을 전달
        // stmnt->setInt(1,1);
        // 객체의 내부 함수를 이용하여 쿼리를 실행
        
        sql::ResultSet *res;
        res=stmnt->executeQuery();
        while (res->next())
        {
            std::cout <<res->getString(1)<<", ";
            std::cout <<res->getString(2)<<", 20대이하남성: ";
            std::cout <<res->getInt(3)<<"건 , 20~30세남성: ";
            std::cout <<res->getInt(4)<<"건 , 31~40세남성: ";
            std::cout <<res->getInt(5)<<"건 , 41~50세남성: ";
            std::cout <<res->getInt(6)<<"건 , 51~60세남성: ";
            std::cout <<res->getInt(7)<<"건 , 70세이상남성: ";
            std::cout <<res->getInt(8)<<"건 , 신원미상남성: ";
            std::cout <<res->getInt(9)<<"건"<<std::endl<<std::endl<<std::endl;
        }

        for (int i = 0; i < 50; i++)
        {
            std::cout <<"---";
        }
        std::cout<<"\n";
        res=stmnt->executeQuery();

        while (res->next())
        {
            std::cout <<res->getString(1)<<", ";
            std::cout <<res->getString(2)<<", 20대이하여성: ";
            std::cout <<res->getInt(9)<<"건 , 20~30세여성: ";
            std::cout <<res->getInt(10)<<"건 , 31~40세여성: ";
            std::cout <<res->getInt(11)<<"건 , 41~50세여성: ";
            std::cout <<res->getInt(12)<<"건 , 51~60세여성: ";
            std::cout <<res->getInt(13)<<"건 , 70세이상여성: ";
            std::cout <<res->getInt(14)<<"건 , 신원미상여성: ";
            std::cout <<res->getInt(15)<<"건"<<std::endl<<std::endl<<std::endl;
        }
        

    // 실패시 오류 메세지 반환
    } catch(sql::SQLException& e){
      std::cerr << "Error inserting new task: " << e.what() << std::endl;
   }
}

void showGBCCFAgeSex(std::unique_ptr<sql::Connection> &conn) {
    try {
        // PreparedStatement 객체 생성
        std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM GBCCF_AGESEX "));
        // 객체에 값을 전달
        // stmnt->setInt(1,1);
        // 객체의 내부 함수를 이용하여 쿼리를 실행
        
        sql::ResultSet *res;
        res=stmnt->executeQuery();
        int mansCrime=0;
        while (res->next())
        {
            std::cout <<res->getString(1)<<", 20대이하남성: ";
            std::cout <<res->getInt(2)<<"건 , 20~30세남성: ";
            std::cout <<res->getInt(3)<<"건 , 31~40세남성: ";
            std::cout <<res->getInt(4)<<"건 , 41~50세남성: ";
            std::cout <<res->getInt(5)<<"건 , 51~60세남성: ";
            std::cout <<res->getInt(6)<<"건 , 70세이상남성: ";
            std::cout <<res->getInt(7)<<"건 , 신원미상남성: ";
            std::cout <<res->getInt(8)<<"건"<<std::endl<<std::endl<<std::endl;
            for (int i = 2; i <=8 ; i++)
            {
                mansCrime+=res->getInt(i);
            }
        }
        for (int i = 0; i < 50; i++)
        {
            std::cout <<"---";
        }
        std::cout<<"\n";
        res=stmnt->executeQuery();
        int woMansCrime=0;
        while (res->next())
        {
            std::cout <<res->getString(1)<<", 20대이하여성: ";
            std::cout <<res->getInt(9)<<"건 , 20~30세여성: ";
            std::cout <<res->getInt(10)<<"건 , 31~40세여성: ";
            std::cout <<res->getInt(11)<<"건 , 41~50세여성: ";
            std::cout <<res->getInt(12)<<"건 , 51~60세여성: ";
            std::cout <<res->getInt(13)<<"건 , 70세이상여성: ";
            std::cout <<res->getInt(14)<<"건 , 신원미상여성: ";
            std::cout <<res->getInt(15)<<"건"<<std::endl<<std::endl<<std::endl;
          for (int i = 9; i <= 15; i++)
        {
            woMansCrime +=res->getInt(i);
        }
        }
      
        std::cout<<"\n\n\n 남성 범죄 발생 수:"<<mansCrime<<"\t 여성 범죄 발생 수: "<<woMansCrime;

    // 실패시 오류 메세지 반환
    } catch(sql::SQLException& e){
      std::cerr << "Error inserting new task: " << e.what() << std::endl;
   }
}

void showGraphAgeSex(std::unique_ptr<sql::Connection> &conn) {
    try {
        // PreparedStatement 객체 생성
        std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM GBCCF_AGESEX "));
        // 객체에 값을 전달
        // stmnt->setInt(1,1);
        // 객체의 내부 함수를 이용하여 쿼리를 실행
        std::string cn="남자(20세이하)	남자(21-30세)	남자(31-40세)	남자(41-50세)	남자(51-60세)	남자(61-70세)	남자(71세이상)	남자(미상)	여자(20세이하)	여자(21-30세)	여자(31-40세)	여자(41-50세)	여자(51-60세)	여자(61-70세)	여자(71세이상)	여자(미상)";
        std::istringstream ss(cn);
        std::string cln[13];   
        for (int i = 0; i < 13; i++)
        {
            ss>>cln[i];
        }
        std::string ccf[15];
        std::vector<int> a[8];
        sql::ResultSet *res;
        int count=0;
        res=stmnt->executeQuery();
        while (res->next())
        {
        ccf[count]=res->getString(1);
        a[0].push_back(res->getInt(2));
        a[1].push_back(res->getInt(3));
        a[2].push_back(res->getInt(4));
        a[3].push_back(res->getInt(5));
        a[4].push_back(res->getInt(6));
        a[5].push_back(res->getInt(7));
        a[6].push_back(res->getInt(8));
        a[7].push_back(res->getInt(9));
        count++;
        }
        int s=0;
        int max=0;
        std::string stop;
        
        while(--count)
        {
            int* z = new int[8];
            for (int  i = 0; i < 8; i++)
            {
                max = max < a[i][s] ? a[i][s] : max;
                z[i]=a[i][s];
            }
           
        
            max=spiltmax(max,z,8);
            
            for (int  i = 0; i < 8; i++)
            {
              
                z[i]-=max;
             
            }
            
            // for (int i = 0; i <7; i++)
            // {
            //     std::cout <<z[i]<<" ";
            // }
            std::cout<<ccf[15-count]<<"\n";
            for (int i = 0; i < max; i++)
            {

                if(z[0]==0)
                {
                    std::cout<<"#";
                }
                else
                {
                    z[0]++;
                //    std::cout<<" ";
                }  
                if(z[1]==0)
                    std::cout<<std::setw(30)<<"#";
                else
                {
                    z[1]++;
                    // std::cout<<" ";
                }
                
                if(z[2]==0)
                    std::cout<<std::setw(30) <<"#";
                else
                {
                z[2]++;
                // std::cout<<" ";
                }
                if(z[3]==0)
                   std::cout<<std::setw(30)<<"#";
                else{
                    z[3]++;
                    // std::cout<<" ";
                    }
                if(z[4]==0)
                    std::cout<<std::setw(30)<<"#";
                else{
                    z[4]++;
                    // std::cout<<" ";
                }
                if(z[5]==0)
                    std::cout<<std::setw(30)<<"#";
                else
                {
                    z[5]++;
                    // std::cout<<" ";
                }
                if(z[6]==0)
                    std::cout<<std::setw(30)<<"#";
                else
                {    
                    z[6]++;
                    // std::cout<<" ";
                }
                
                if(z[7]==0)
                    std::cout<<std::setw(30)<<"#";
                else
                {    
                    z[7]++;
                    // std::cout<<" ";
                }
            std::cout<<"\n";
            }
           
           std::cout<<"\n"<<cln[0]<<std::setw(30)<<cln[1]<<std::setw(30)<<cln[2]<<std::setw(30)<<cln[3]<<std::setw(30)<<cln[4]
           <<std::setw(30)<<cln[5]<<std::setw(30)<<cln[6]<<std::setw(30)<<cln[7]<<"\n";
            s++;
            std::cout<<"다른 그래프도 보시겠습니까? y or n ";
            getline(std::cin,stop);
            if(stop == "n" || stop =="N")
            {
                break;
                delete z;
            }
            std::cout <<count<<std::endl;
            delete z;
        }
        
        
        
        // std::cout<<"\n";
        // res=stmnt->executeQuery();
        // int woMansCrime=0;
        // while (res->next())
        // {
        //     std::cout <<res->getString(1)<<", 20대이하여성: ";
        //     std::cout <<res->getInt(9)<<"건 , 20~30세여성: ";
        //     std::cout <<res->getInt(10)<<"건 , 31~40세여성: ";
        //     std::cout <<res->getInt(11)<<"건 , 41~50세여성: ";
        //     std::cout <<res->getInt(12)<<"건 , 51~60세여성: ";
        //     std::cout <<res->getInt(13)<<"건 , 70세이상여성: ";
        //     std::cout <<res->getInt(14)<<"건 , 신원미상여성: ";
        //     std::cout <<res->getInt(15)<<"건"<<std::endl<<std::endl<<std::endl;
        //   for (int i = 9; i <= 15; i++)
        // {
        //     woMansCrime +=res->getInt(i);
        // }
        // }
      
      
    std::cout<<"정상종료"<<std::endl;
    // 실패시 오류 메세지 반환
    } catch(sql::SQLException& e){
      std::cerr << "Error inserting new task: " << e.what() << std::endl;
   }
}

void showPlace(std::unique_ptr<sql::Connection> &conn)
{
try{
    std::string cc="연립다세대	단독주택	고속도로	노상	백화점	슈퍼마켓	편의점	대형할인매장	시장	상점	숙박시설	유흥업소	사무실	공장	공사지역	창고	역대합실	지하철	흥행장	유원지	학교	금융기관	의료기관	종교기관	산야	해상	부대	공터	주차장	공중화장실	피씨방	기타";
    std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM PLACE"));
    std::istringstream ss(cc);
    std::string columns[34];
    for (int i = 0; i < 32; i++)
    {
        ss>>columns[i];
    }
    sql::ResultSet *res;
    res=stmnt->executeQuery();
    while (res->next())
    {
        for (int i = 1; i <= 32; i++)
        {
                if(i<3)
                {
                    std::cout<<res->getString(i)<<"  ";
                }
                else
                    std::cout <<columns[i-3]<<" :  "<<res->getString(i)<<"건  ";
                if(i==16)
                    std::cout<<std::endl<<std::endl;
        }
         for (int j = 0; j < 60; j++)
                    {
                        std::cout<<"---";
                    }
                    
        std::cout<<std::endl<<std::endl;
    }
    }catch(sql::SQLSyntaxErrorException e)
    {
        std::cerr << "Error inserting new task: " << e.what() << std::endl;
    }

    
}

void showGBCCF_Place(std::unique_ptr<sql::Connection> &conn)
{
    try {
    std::string cc="연립다세대	단독주택	고속도로	노상	백화점	슈퍼마켓	편의점	대형할인매장	시장	상점	숙박시설	유흥업소	사무실	공장	공사지역	창고	역대합실	지하철	흥행장	유원지	학교	금융기관	의료기관	종교기관	산야	해상	부대	공터	주차장	공중화장실	피씨방	기타";
    std::unique_ptr<sql::PreparedStatement> stmnt(conn->prepareStatement("SELECT * FROM NOSIX"));
    std::istringstream ss(cc);
    std::string columns[34];
    for (int i = 0; i < 32; i++)
    {
        ss>>columns[i];
    }
    sql::ResultSet *res;
    res=stmnt->executeQuery();
    while (res->next())
    {
        for (int i = 1; i <= 32; i++)
        {
                if(i==1)
                {
                    std::cout<<res->getString(i)<<"  ";
                }
                else
                    std::cout <<columns[i-2]<<" :  "<<res->getString(i)<<"건  ";
                if(i==16)
                    std::cout<<std::endl<<std::endl;
        }
        for (int j = 0; j < 60; j++)
        {
            std::cout<<"---";
        }
                    
        std::cout<<std::endl<<std::endl;
    }
    }catch(sql::SQLSyntaxErrorException e)
    {
        std::cerr << "Error inserting new task: " << e.what() << std::endl;
    }    
}

int spiltmax(int max,int* array,int size)
{

    
    if(max>20000)
    {
        for (int i = 0; i < size; i++)
        {
          if(array[i]/1000!=0)  
            array[i]=array[i]/1000;
            else
                array[i]=0;
        }    
        return max/1000;
    }

    else if(max >1000 & max < 20000)
    {
        for (int i = 0; i < size; i++)
        {
            if(array[i]/500!=0)  
                array[i]=array[i]/500;
            else
                array[i]=0;
        }
        return max/500;
    }
    else if(max >100 & max <1000)
    {
        for (int i = 0; i < size; i++)
        {
            if(array[i]/100 !=0) 
                array[i]=array[i]/100;
            else
                array[i]=0;
        }
        return max/100;
    }
    else if(max <100)
    {
        for (int i = 0; i < size; i++)
        {
         if(array[i]/10 !=0)   
            array[i]=array[i]/10;
         else
            array[i]=0;
        }
        return max/10;
    }
 return 0;
}

