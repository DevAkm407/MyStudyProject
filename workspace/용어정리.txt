POSIX란 이식 가능 운영 체제 인터페이스라는 뜻이다.
'P'ortable 'O'perating 'S'ystem 'I'nterface X는 UNIX에 X

fchntl.h 파일을 열고, 잠금 및 다른 작업을 할 수 있는 헤더파일
리눅스에선 모든 데이터처리를 파일단위로 하기때문에 필수...


unistd.h:다양한 POSIX 함수와 상수

unistd는 read와  write를 사용하기 위해서 사용한다.

리눅스는 기본적으로 파일단위로 프로그램이 작동하기 때문에 read와 write를 통신에도 이용할 수 있다.

stdlib.h는 이름그대로 표준라이브러리 헤더파일이다.

동적 메모리 관리와 프로세스 제어등 뭔가 하려면 이 헤더파일은 필수일것이다.




#inclue <sys/socket.h> 시스템 소켓에관한 헤더파일
int socket(int domain, int type, int protocol); 소켓함수 int 타입으로 리턴을받음

성공시 파일 디스크립터, 실패 시 -1 반환 파일 디스크립터는 파일을 프로세스에 할당할때

그 파일을 구분하기위해 놓은 인덱스이다.

domain은 어떤 프로토콜 체계를 사용할것인지 정한다.

type은 데이타 전송방식을 어떤것으로 할것인지 정합니다.

전송제어프로토콜(TCP), UDP(사용자 데이터그램 프로토콜), 사용자정의

protocol 두 컴퓨터간 통신에 사용되는 프로토콜 정보 입니다.

---------------------------------------------------------------------------------------------
프로토콜 체계(protocol Family)

PF_INET     IPv4 인터넷 프로토콜 체계 (xxx.xxx.xxx.xxx) .이4개있음 32비트 주소
PF_INET6    IPv6  인터넷 프로토콜 체계 영숫자 주소 지정방법 :로 구분된다고 한다. 128비트 주소
PF_LOCAL    로컬(지역) 통신을 위한 UNIX 프로토콜 체계
PF_PACKET   Low Level(운영체제에서 지원하는) 소켓을 위한 프로토콜 체게
PF_IPX      IPX 노벨 프로토콜 체계

중요한점은 현제 인터넷 네트워크를 사용하기위해선 보편적으로 IPv4를 사용한다는 것
따라서 PF_INET을 제외한 나머지는 사용할 이유가 적을 듯 하다.
----------------------------------------------------------------------------------------------------------
소켓의 타입

소켓의 타입이란 소켓의 데이터 전송방식을 의미하는데,이 정보가 socket함수에 인자로 들어가야만 한다.
이유는 데이터 전송방식을 설정하기위해서이다.
즉 PF_INET을 설정하고 sock_stream을 설정한다면. IPv4 프로토콜 방식으로 네트워크를 사용할 것이고
TCP 방식으로 데이터를 전송할 것이라는 말이다. 즉 이 소켓은 네트워크를 느리지만 정확한 데이터 전송방식으로
이용하겠다는 말이다.

SOCK_STREAM 은 사용자의 버퍼가 여유가 있는지 확인하며 전송이 이루어진다.
따라서 전송을 빨리해서 버퍼가 빨리 차오른다고 해도 보내는 쪽에서 상대방의 버퍼 상태를 보고 받기 때문에 
속도를 조절 할 수 있다. 따라서 사용자의 처리가 느리다는 이유로 데이터 손실이 일어나지 않는다.
또한 데이터를 순서대로 보내기 때문에 데이터의 크기도 마음대로 지정할 수 있다.

SOCK_DGRAM

빠른 데이터 전달을 위해서 쌍뱡향통신을 하지 않는다 일방적으로 상대에게 데이터를 보내며
데이터도 순서대로 가는 것이 아니다. 따라서 데이터를 클라이언트가 조립해야 하기 때문에
데이터의 순번도 지정해서 보내준다. 데이터를 빨리 많이 보내는 방법이기 때문에
최대 데이터 크기가 제한된다.(데이터가 클수록 물리적인 손실이 일어날 수 있다.)
이 방식은 데이터가 제대로 도착했는지 또는 데이터가 손실이 없는지에 대한
검사를 진행 하지 않기에(받는 쪽도 보내는 쪽도)TCP보다 데이터가 크면 클수록 더 빨리 보낼 수 있다.
(단 데이터의 용량이 커질수록 파일이 손상될 가능성이 높다.)



출처:https://www.top10vpn.com/ko/guides/udp-vs-tcp/


 	                        UDP 	                                    TCP
작동방식                     연결을 설정하지 않음                        연결을 설정함

속도                        TCP보다 빠름                                UDP보다 느림

안정성                      TCP보다 낮음                                UDP보다 높음

손상된 패킷(Packet Loss)
을 재전송 하나요?               안함                                      재전송함

패킷이 올바른 순서로
착신 되었는지 확인하나요?        안함                                      확인함


전송량 컨트롤                없음-수신이 과부하되면                     있음-수신자는패킷을 수신하기위해
                            데이터 패킷이 삭제(손실)될 수 있습니다.     버퍼에 얼마나 공간이 있는지 발신자에
                                                                     게 알려줍니다.TCP는 여유 공간이 생길때
                                                                     까지 패킷을 보관합니다.

데이터 사용량               낮음                                      높음

-------------------------------------------------------------------------------------------------------------

3번째인자 protocol 
하나의 프로토콜 체계 안에 데이터의 전송방식이 동일한 프로콜이 둘 이상 존재하는 경우

예를 들어 TCP처럼 연결지향형 방식일 수 있지만 TCP의 문제점 개선 이라던지 또는

다른 이유가 있어서 만든 protocol이 있을 수 있다. 그때 어떤 방식의 TCP를 사용할 것인지 정하라는 것이다.

-------------------------------------------------------------------------------------------------------------

int bind(int sockfd, struct sockaddr *myaddr,socklen_t addrlen);
성공시 0, 실패시 -1 반환

socket에서 반환된 socket desciptor를 받고 소켓에 구조체 포인터를 받는다.

그리고 구조체에 길이를 받는다.

bind는 소켓에 주소와 포트번호를 할당해주기 위한 시스템 콜이다.

struct sockaddr에는 나의 adddress와 port number가 들어있다.


-------------------------------------------------------------------------------------------------------------
